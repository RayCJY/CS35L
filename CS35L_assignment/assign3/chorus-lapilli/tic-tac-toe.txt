export default function Square() {
  return <button className="square">X</button>;
}

The Square function, exported as the default from this JavaScript file, returns a JSX button styled with 
the "square" CSS class and displaying the text "X". This makes the component easily importable and usable 
across a React application, rendering a button with "X" inside a square, as dictated by the assigned styling.






--------------------------------------------------------------
export default function Square() {
  return (
    <>
      <button className="square">X</button>
      <button className="square">X</button>
    </>
  );
}

Use <>...</> to do multiple times. From the last implementation, if we do multiple times of 
<button className="square">X</button>, we will get the squares with x inside that all in a single line.






--------------------------------------------------------------
export default function Square() {
  return (
    <>
      <div className="board-row">
        <button className="square">1</button>
        <button className="square">2</button>
        <button className="square">3</button>
      </div>
      <div className="board-row">
        <button className="square">4</button>
        <button className="square">5</button>
        <button className="square">6</button>
      </div>
      <div className="board-row">
        <button className="square">7</button>
        <button className="square">8</button>
        <button className="square">9</button>
      </div>
    </>
  );
}

Use the div to div the single line into rows 






--------------------------------------------------------------
function Square({ value }) {
  return <button className="square">{value}</button>;
}

export default function Board() {
  return (
    <>
      <div className="board-row">
        <Square value="1" />
        <Square value="2" />
        <Square value="3" />
      </div>
      <div className="board-row">
        <Square value="4" />
        <Square value="5" />
        <Square value="6" />
      </div>
      <div className="board-row">
        <Square value="7" />
        <Square value="8" />
        <Square value="9" />
      </div>
    </>
  );
}

The initial implementation of the Square function generates a 3x3 grid of buttons, directly within 
the function, with hardcoded values from 1 to 9. To make the code more maintainable, we create a reusable 
Square component that takes a value prop, allowing for dynamic content display. Subsequently, a Board 
component can be introduced to manage the grid and pass the unique values to each Square. This results 
in a cleaner, more modular structure, with the Board component handling the layout and data, while the 
Square component focuses on presenting the individual squares.






--------------------------------------------------------------
function Square({ value }) {
  function handleClick() {
    console.log('clicked!');
  }

  return (
    <button
      className="square"
      onClick={handleClick}
    >
      {value}
    </button>
  );
}

The Square component is enhanced for interactivity, responding to clicks with a handleClick function that 
logs "clicked!" to the console. This interaction is established by assigning handleClick to the onClick prop 
of the button element. Each click increments a counter in the console, providing a concise way to track the 
number of clicks without overwhelming the console with repeated log entries. This lays the groundwork for 
future functionalities, such as updating the square's display on click.





--------------------------------------------------------------
import { useState } from 'react';

function Square() {
  const [value, setValue] = useState(null);

  function handleClick() {
    setValue('X');
  }

  return (
    <button
      className="square"
      onClick={handleClick}
    >
      {value}
    </button>
  );
}

export default function Board() {
  return (
    <>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
    </>
  );
}

After importing useState from React, the Square component is refactored to manage its own state. Instead of 
receiving its value as a prop, Square now initializes its value state to null using the useState hook. The 
setValue function, provided by useState, allows updating the value state. When a square is clicked, the 
handleClick function sets the value state to 'X', which triggers a re-render and displays "X" on the game board.






--------------------------------------------------------------
function Square({value}) {
  return <button className="square">{value}</button>;
}
export default function Board() {
  const [squares, setSquares] = useState(Array(9).fill(null));
  return (
    <>
      <div className="board-row">
        <Square value={squares[0]} />
        <Square value={squares[1]} />
        <Square value={squares[2]} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} />
        <Square value={squares[4]} />
        <Square value={squares[5]} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} />
        <Square value={squares[7]} />
        <Square value={squares[8]} />
      </div>
    </>
  );
}

In order to collect data from multiple children or have two child components communicate with each other, we need
to declare the share state in their parent. Array(9).fill(null) is to create 9 elements and set all to null. The 
array could be:['O', null, 'X', 'X', 'X', 'O', 'O', null, null]. Followed by above, board components should pass the 
Value prop down to each square then change the code of square function to let it receives the value prop from board.





--------------------------------------------------------------
	function Square({ value, onSquareClick }) {
 	 return (
  	  <button className="square" onClick={onSquareClick}>
 	     {value}
	    </button>
	  );
	}
	export default function Board() {
	  const [squares, setSquares] = useState(Array(9).fill(null));

	  function handleClick() {
	    const nextSquares = squares.slice();	//creates a shallow copy of the squares array to avoid direct mutation of state.
	    nextSquares[0] = "X";			//updates the first square (index 0) of the copied array to "X"
 	   setSquares(nextSquares);			//updated with the modified array using the setSquares function
	  }
	
	  return (
	    // ...
	  )
	}

		  Then the code become
			  ->

import { useState } from 'react';

function Square({ value, onSquareClick }) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

export default function Board() {
  const [squares, setSquares] = useState(Array(9).fill(null));

  function handleClick(i) {
    const nextSquares = squares.slice();
    nextSquares[i] = 'X';
    setSquares(nextSquares);
  }

  return (
    <>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}


Now, we make a function named onSquareClick and add it to square. When the square get clicked, the function square will 
be called. Then we define the function handleClick and connect it to onSquareClick. The previous step can only update the 
upper left square. In order to be able to update any square, we need to add argument i to take the index to update. 
For a faster way, use syntax =>, which can call the next function to run. Also, update all other 8 squares.





--------------------------------------------------------------
import { useState } from 'react';

function Square({value, onSquareClick}) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

export default function Board() {
  const [xIsNext, setXIsNext] = useState(true);		//declares a state variable: xIsNext and a function to update: setXIsNext
  const [squares, setSquares] = useState(Array(9).fill(null));

  function handleClick(i) {
    if (squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    setSquares(nextSquares);
    setXIsNext(!xIsNext);		//prepare for next player to take turns
  }

  return (
    <>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}

Now, to implement the "O" in the game, we need to make a function to take turns. If xIsNext=1, the put "X", otherwise, put "O". An issue
occurs here is when we click the same square twice, the original mark will be replace by another. To deal with this issue, we need to 
add if (squares[i]) {return;} to check if the square exists a "O" or "X". 





--------------------------------------------------------------
function calculateWinner(squares) {
  // Define all possible winning lines in a tic-tac-toe game.
  const lines = [
    [0, 1, 2],  // Top row
    [3, 4, 5],  // Middle row
    [6, 7, 8],  // Bottom row
    [0, 3, 6],  // Left column
    [1, 4, 7],  // Middle column
    [2, 5, 8],  // Right column
    [0, 4, 8],  // Left-to-right diagonal
    [2, 4, 6]   // Right-to-left diagonal
  ];
  
  // Loop over all the winning lines to check for a winner.
  for (let i = 0; i < lines.length; i++) {
    // Destructure the indices of the current winning line.
    const [a, b, c] = lines[i];
    
    // Check if the squares at the destructured indices are the same (and not null).
    // If they are, we have a winner.
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      // Return the winner ('X' or 'O').
      return squares[a];
    }
  }
  
  // If no winner is found, return null.
  return null;
}

This function is to implement the winner of this game. It shows all possible ways to win the game, also, if no one wins the game, return null.





--------------------------------------------------------------
import { useState } from 'react';

function Square({value, onSquareClick}) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

export default function Board() {
  const [xIsNext, setXIsNext] = useState(true);
  const [squares, setSquares] = useState(Array(9).fill(null));

  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) { 		//jump out the function if winner found or square exist "X" or "O"
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    setSquares(nextSquares);
    setXIsNext(!xIsNext);
  }

  const winner = calculateWinner(squares); 	//calls the function calculateWinner and passes the current state of the game
  let status;
  if (winner) {							//here is just the message for the game
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
  }

  return (
    <>
      <div className="status">{status}</div>		//add the status to board component to display the current status
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}


To this step, we finish the game and implement the function to make the status more clear. Also, the || operator make sure that the game is 
ongoing or the winner is found.





--------------------------------------------------------------
export default function Game() {
  const [xIsNext, setXIsNext] = useState(true);
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const currentSquares = history[history.length - 1];

  function handlePlay(nextSquares) {
    setHistory([...history, nextSquares]);
    setXIsNext(!xIsNext);
  }

  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{/*TODO*/}</ol>
      </div>
    </div>
  );
}

Add some state to the Game component to track which player is next and the history of moves. This component maintains the history of the game as a state, capturing every move made during the game. In addition, we have also designated Game as the default component to facilitate this enhanced functionality. The handlePlay function plays a crucial role in updating the game's history; it appends the current state of the game board to the history after each move and toggles the xIsNext state to switch turns between the two players.




--------------------------------------------------------------
import { useState } from 'react';

function Square({ value, onSquareClick }) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

function Board({ xIsNext, squares, onPlay }) {
  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    onPlay(nextSquares);
  }

  const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
  }

  return (
    <>
      <div className="status">{status}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}

export default function Game() {
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const [currentMove, setCurrentMove] = useState(0);
  const xIsNext = currentMove % 2 === 0;
  const currentSquares = history[currentMove];

  function handlePlay(nextSquares) {
    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
    setHistory(nextHistory);
    setCurrentMove(nextHistory.length - 1);
  }

  function jumpTo(nextMove) {
    setCurrentMove(nextMove);
  }

  const moves = history.map((squares, move) => {
    let description;
    if (move > 0) {
      description = 'Go to move #' + move;
    } else {
      description = 'Go to game start';
    }
    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });

  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{moves}</ol>
      </div>
    </div>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}

To effectively implement the jumpTo functionality in our game, it’s essential to meticulously track the user’s current step. This is achieved by introducing a new state variable named currentMove, initially set to 0. Subsequently, we need to refine the jumpTo function within the Game component to keep currentMove updated. The handlePlay function ensures that when a player revisits a previous move and makes a new one, the game's history is updated to discard any future moves, maintaining the integrity of the game's timeline. By slicing the history up to the current move before adding the new state, and updating currentMove to the latest entry, it guarantees an accurate and seamless navigation through the game’s history. The Game component's code has been simplified by removing the xIsNext state variable, calculating its value directly from currentMove. 



